/*
 * Copyright (C) 2013 The Project Lombok Authors.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package lombok.eclipse.handlers;

import static lombok.eclipse.handlers.EclipseHandlerUtil.*;

import java.util.Collections;
import java.util.List;

import org.eclipse.jdt.internal.compiler.ast.Annotation;
import org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration;
import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;
import org.eclipse.jdt.internal.compiler.ast.TypeDeclaration;

import lombok.AccessLevel;
import lombok.core.AnnotationValues;
import lombok.core.ImmutableList;
import lombok.core.JavaIdentifiers;
import lombok.eclipse.EclipseAnnotationHandler;
import lombok.eclipse.EclipseNode;
import lombok.experimental.Builder;

public class HandleBuilder extends EclipseAnnotationHandler<Builder> {
	@Override public void handle(AnnotationValues<Builder> annotation, Annotation ast, EclipseNode annotationNode) {
		String builderMethodName = annotation.getInstance().builderMethodName();
		if (builderMethodName == null) builderMethodName = "builder";
		if (builderMethodName.length() == 0) {
			annotationNode.addError("builderMethodName cannot be the empty string.");
			return;
		}
		
		if (!JavaIdentifiers.isValidJavaIdentifier(builderMethodName)) {
			annotationNode.addError("builderMethodName must be a valid java method name.");
			return;
		}
		
		EclipseNode parent = annotationNode.up();
		
		if (parent.get() instanceof ConstructorDeclaration) {
			
		}
		
		if (parent.get() instanceof MethodDeclaration) {
			
		}
		
		if (parent.get() instanceof TypeDeclaration) {
			// TODO: How do we ensure this one will 'win' over the implicit constructors generated by @Data and @Value.
			new HandleConstructor().generateAllArgsConstructor(parent, AccessLevel.PRIVATE, null, true, Collections.<Annotation>emptyList(), ast);
		}
	}
}
