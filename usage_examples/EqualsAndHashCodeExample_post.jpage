import java.util.Arrays;

public class EqualsAndHashCodeExample {
	private transient int transientVar = 10;
	private String name;
	private double score;
	private Shape shape = new Square(5, 10);
	private String[] tags;
	private int id;
	
	@Override public boolean equals(Object o) {
		if (o == this) return true;
		if (o == null) return false;
		if (o.getClass() != this.getClass()) return false;
		EqualsAndHashCodeExample other = (EqualsAndHashCodeExample) o;
		if (name == null ? other.name != null : !name.equals(other.name)) return false;
		if (Double.compare(score, other.score) != 0) return false;
		if (!Arrays.deepEquals(tags, other.tags)) return false;
		return true;
	}
	
	@Override public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final long temp1 = Double.doubleToLongBits(score);
		result = (result*PRIME) + (name == null ? 0 : name.hashCode());
		result = (result*PRIME) + (int)(temp1 ^ (temp1 >>> 32));
		result = (result*PRIME) + Arrays.deepHashCode(tags);
		return result;
	}
	
	public static class Square extends Shape {
		private final int width, height;
		
		public Square(int width, int height) {
			this.width = width;
			this.height = height;
		}
		
		@Override public boolean equals(Object o) {
			if (o == this) return true;
			if (o == null) return false;
			if (o.getClass() != this.getClass()) return false;
			if (!super.equals(o)) return false;
			Square other = (Square) o;
			if (width != o.width) return false;
			if (height != o.height) return false;
			return true;
		}
		
		@Override public int hashCode() {
			final int PRIME = 31;
			int result = 1;
			result = (result*PRIME) + super.hashCode();
			result = (result*PRIME) + width;
			result = (result*PRIME) + height;
			return result;
		}
	}
}
