/*
 * Copyright Â© 2009 Reinier Zwitserloot and Roel Spilker.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package lombok.eclipse.agent;

import org.mangosdk.spi.ProviderFor;
import org.objectweb.asm.ClassAdapter;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodAdapter;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

/**
 * Transforms Eclipse's <code>org.eclipse.jdt.core.dom.ASTConverter</code> class, which sometimes rescans bits and pieces
 * of source files because Eclipse's own AST doesn't actually have enough information for eclipse (why they don't just fix
 * the AST tree generator is beyond me). At any rate, for catch blocks generated by lombok, eclipse tries to rescan the
 * source file to find the source position of the catch statement, which will of course fail as there's nothing there.
 * We will fix the code to return the original starting position, which is a pretty good simile, instead of '-1', which
 * screws up all sorts of things.
 * 
 * Transformations applied:<ul>
 * <li>The <code>retrieveStartingCatchPosition(int, int)</code> method is instrumented to return its first parameter
 * instead of the constant -1.</li></ul>
 */
@ProviderFor(EclipseTransformer.class)
public class EclipseASTConverterTransformer implements EclipseTransformer {
	public byte[] transform(byte[] classfileBuffer) {
		ClassReader reader = new ClassReader(classfileBuffer);
		ClassWriter writer = new ClassWriter(reader, 0);
		
		ClassAdapter adapter = new ASTConverterPatcherAdapter(writer);
		reader.accept(adapter, 0);
		return writer.toByteArray();
	}
	
	private static class ASTConverterPatcherAdapter extends ClassAdapter {
		public ASTConverterPatcherAdapter(ClassVisitor cv) {
			super(cv);
		}
		
		@Override public MethodVisitor visitMethod(int access, String name, String desc,
				String signature, String[] exceptions) {
			MethodVisitor writerVisitor = super.visitMethod(access, name, desc, signature, exceptions);
			if ( !name.equals("retrieveStartingCatchPosition") ) return writerVisitor;
			
			return new RetrieveStartingCatchPositionPatcher(writerVisitor);
		}
	}
	
	static class RetrieveStartingCatchPositionPatcher extends MethodAdapter {
		RetrieveStartingCatchPositionPatcher(MethodVisitor mv) {
			super(mv);
		}
		
		int count = 0;
		@Override public void visitInsn(int opcode) {
			if ( opcode == Opcodes.IRETURN ) {
				if ( count++ == 0 ) {
					super.visitInsn(opcode);
					return;
				}
				//replaces: "return -1" with "return [firstParam]";
				super.visitInsn(Opcodes.POP);
				super.visitVarInsn(Opcodes.ILOAD, 1);
				super.visitInsn(Opcodes.IRETURN);
			} else {
				super.visitInsn(opcode);
			}
		}
	}
	
	@Override public String getTargetClassName() {
		return "org/eclipse/jdt/core/dom/ASTConverter";
	}
}
